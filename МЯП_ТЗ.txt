Необходимо создать на C# мини ЯП с очень простыми функциями.
Это нужно сделать минимальными инструментами, для работы в среде Cosmos(https://github.com/CosmosOS/Cosmos/). Там нету потоков, отражений(reflections), много чего еще.

Функции ЯП`а:

1. SET
    SET [имя переменной], [значение] : [тип]
    Аналогичная строка на шарпе: [тип] [имя] = [значение].

    Имя переменной - любое которое не содержит спец символы(кроме точек).
    Значчение - Как обычое значение, так и выражение(например 1+2, 7*2, 2/4, 3-1). Выражения обертываются в круглые скобки.
    Тип - Тип переменной: INT, STRING, BOOL, FLOAT. Желательно: Можно сделать через динамический лист + кастомный класс переменной. Это позволит убрать типизацию.

    ВАЖНО! ВСЕ переменные ГЛОБАЛЬНЫ!!!

2. PUSH
    PUSH [имя переменной]

    Возможность удалить из списка переменных(или еще чего-то) переменную.

3. WRITE
    WRITE [имя переменной]
    WRITE [строка]

    Аналогичная строка на шарпе: Console.WriteLine(anything);
    Вывод переменной или строки

4. INPUT
    INPUT [имя переменной] [Ожидаемый тип]
    
    Ввод типизированного значения в переменную. Если переменной еще не существует, то ее нужно создать.

5. JUMP
    JUMP [линия]

    Переход на заданную строку

6. END
    END

    В функциях означает конец функции, а в файле конец файла

7. Функции
    7.1 Пример функции
        DEFINE func ! Обозначаем функцию
            WRITE "Введите число: "
            INPUT msg : INT
            SET res, (msg * msg) : INT
            WRITE "Квадрат этого числа равен: "
            WRITE res
        END

        CALL func ! Вызываем функцию
    
    7.2 Ключевые слова:
        DEFINE [имя функции] - Объявление функции
        END - Конец функции
        CALL - Вызов функции
        PUSH [имя функции]* - Удаление функции

8. Импорт кода из других файлов
    8.1 Пример
        Файл func.mas:
            DEFINE func ! Обозначаем функцию
                WRITE "Введите число: "
                INPUT msg : INT
                SET res, (msg * msg) : INT
                WRITE "Квадрат этого числа равен: "
                WRITE res
            END
        Файл main.mas:
            %include% "func1.mas"

            CALL func ! Вызываем функцию из другого файла.
    8.2 Реализация
        Как угодно. Поскольку ЯП наитупейший, то можно просто все файлы собирать в один.

9 Условные выражения
    9.1 Пример
        9.1.1 Полные выражения
            SET x, 1 : INT 
            SET y, 1 : INT

            IF x == y :
                CALL test_func
                WRITE "x = y"
            END ? (== else)
                CALL test2_func
                WRITE "x != y"
            END
        9.1.2 Короткие выражения
            SET x, 1 : INT 
            SET y, 1 : INT

            IF x == y : WRITE "x = y" ? WRITE "x != y"
        
    9.2 Объяснение
        IF [условие] :
            что-то если условие = true
        END ?(аналог ELSE)
            что-то если условие не равно true
        END - В несколько строк, можно мультистрочные действия

        IF [условие] : что-то если условие = true ? что-то если условие не равно true - В одну строку, нельзя мультистрочные действия


Далее исполнение данного япа:
1) Интерпретация.
    Что-бы можно было сделать из кода вот так:
        var Runtime = new Runtime();
        Runtime.EexcuteSource(source);

        Где source - многострочная строка.
2) Упаковка.
    Нужно что-бы весь код собирался в один бинарный файл(gzip/zlib/jwt(что?)/любой другой способ) и мог запускаться следующим образом.
        var Runtime = new Runtime();
        Runtime.EexcuteFile("1:\file.bin");
    Упаковка наалогична:
        var Runtime = new Runtime();
        Runtime.PackSource(source, "1:\file.bin");

Оплата: Допускаю несколько вариантов:
1) Постоплата. Вы показываете видео. Я даю вам несколько тестовых скриптов котоыре покажут работоспосбность.
2) Оплата после демонстрации функционала
    2.1) ISO:
        Вы мне даете ISO, я запускаю его и тестирую. Если все ок то оплачиваю работу. 
        ВАЖНО! Все собирается в бинарный файл и его невозможно назад развернуть. разве что в ассемблер.
    2.2) DLL:
        Вы мне даете сборку интерпретатора, я запускаю ее в среде Cosmos, тестирую и оплачиваю.
3) Гарант/Безопасная сделка(За ваш счет)

Сроки: 1-3 дня. Работы не много, просто она очень нудная.